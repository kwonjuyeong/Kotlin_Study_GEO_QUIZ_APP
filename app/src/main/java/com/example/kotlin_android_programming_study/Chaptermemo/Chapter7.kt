package com.example.kotlin_android_programming_study.Chaptermemo

/*
Chapter7
안드로이드 SDK 버전과 호환성

* 안드로이드 SDK 버전
- 안드로이드 버전에는 예전에 사용하던 Jelly Bean, Lollipop 등 부터 Q, S, R 등 최신 버전까지 여러가지가 있다.
- 각 코드명 배포 다음에는 증분적 배포가 뒤따른다.
예를 들어 안드로이드 IceCream Sandwich 는 처음에 안드로이드 4.0(API 레벨 14)으로 배포되었다가 증분적 배포인 4.0.3, 4.0.4(API 레벨 15)로 교체되었다.
- 새로운 버전의 안드로이드가 나오더라도 구버전을 사용하는 장치들이 곧바로 업그레이드 하지 않는다.
그 이유는 제조사의 스마트폰이 같은 운영체제를 기반으로 하지만, 다른 경쟁 제조사를 이겨야 하기 때문에 최신 버전으로 업데이트해주기 보다는 새로운 장치에 더 자원을 쏟기 때문이다.

* 안드로이드 호환성이 중요한 이유
- 업그레이드가 지연됨에 따라 다양한 버전의 안드로이드에 대한 호환성이 중요하다.
- 폭 넓은 시장에 대응하기 위해 다양한 안드로이드 버전에서 실행이 잘되는 앱을 만들어야 한다.
- 폰의 화면은 대부분 안드로이드 레이아웃 시스템이 잘 맞추어 처리해준다, 하지만 TV, 안드로이드 웨어 장치같은 경우는 UI를 따로 호환시켜줘야하는 경우가 많다.

* 최소 안드로이드 버전
- 최저 안드로이드 버전은 안드로이드 버전 점유율을 바탕으로 지원 노력 대비 효과가 가장 효율적인 버전을 설정해줘야한다.
- 증분적인 배포는 과거 버전과 호환성 문제가 거의 없다.(8.x 에서 x에 해당)
- 메이저 버전은 호환성 문제에 있어 중요하기 때문에 지원하는 SDK 버전을 잘 선택해야한다. (8.x에서 8에 해당)
- bundle gradle, Android Manifest.xml에서 설정할 수 있다.
- bundle gradle에서 compileSdkVersion, minSdkVersion(최소 버전), targetSdkVersion(타겟 버전)을 설정할 수 있다.

* 최소 SDK 버전
- 앱을 설치할 수 있는 최소한의 버전을 의미한다.
- 최소 안드로이드 버전을 21이상으로 설정하게 되면 21버전과 그 이상의 버전의 안드로이드 장치에서 개발자가 개발한 앱을 설치할 수 있게 된다.

* 목표 SDK 버전
- targetSdkVersion 값은 앱 설계에 사용된 API 레벨을 안드로이드에 알려준다.
- 대부분의 경우에 이 값이 가장 최신의 안정화된 안드로이드 버전이 된다. 그 이유는 하위 버전과의 호환성이 유지되기 떄문이다.
- 목표 SDK를 하위 버전으로 지정할 경우는 앱이 잘 작동하던 상위 버전에서 동작했던 대로 하위 버전에서도 잘 작동하는지 확인할 경우 지정한다.
이 때는 그 하위 버전 이후의 SDK에서 변경된 내용은 무시한다.
- https://developer.android.com/reference/android/os/Build.VERSION_CODES.html 문서에 안드로이드 버전 코드와 주요 변경 사항을 확인할 수 있다.
- 구글 플레이 스토어에 신규 앱이나 앱 업데이트를 할 때 목표 SDK의 최저 버전에 제한이 있기 때문에 이보다 낮은 버전의 목표 SDK를 지정하지 않기 위해 확인해야한다.

* 컴파일 SDK 버전
- 매니페스트 파일에는 사용되지 않는다.
- 안드로이드의 기능들은 SDK의 클래스와 함수 형태로 사용된다. 컴파일 SDK는 코드를 빌드하려 할 때 사용하는 버전이다.
- 안드로이드 스튜디오가 import 문으로 참조되는 클래스나 함수를 찾을 때 어떤 버전의 SDK에서 찾을 것인가를 결정하는 버전을 뜻한다.
- 컴파일 SDK를 선택할 때 가장 좋은 방법은 가장 최신에 가까우면서 안정된 API레벨을 선택하는 것이다.

- 최소 SDK, 목표 SDK, 컴파일 SDK를 변경한 후 Gradle을 동기화 시켜줘야 한다.
Sync Now를 클릭해 프로젝트를 Gradle과 동기화 시켜줘야한다.

* 상위 버전의 코드를 안전하게 추가하는 방법
- 만약 최소 SDK 버전을 21 레벨로 설정하고 그 보다 상위 버전의 코드를 사용한다면 해당 코드가 무시되거나 앱이 중단될 수 있다.
- 안드로이드는 Lint를 통해 하위 버전 장치에서 상위 버전의 코드를 호출함으로써 생기는 문제를 컴파일 시점에 잡아낼 수 있다.
- 예를 들어 최소 SDK 버전을 21로 설정하고 안드로이드 API레벨 23에서 추가된 makeClipRevealAnimation 함수를 사용하면 Lint에서 경고를 잡아내게 된다.
이는 23 이전 버전인 21, 22 버전에서 제대로 작동하지 않을 수 있음을 알려주는 것이다.
Tip. makeClipRevealAnimation 함수는 애니메이션을 수행하는 함수이다.
- 이 상태에서 컴파일 SDK 버전을 30으로 넣고 돌리게 된다면 레벨 23 이상이기 때문에 컴파일은 문제없이 실행되고 앱이 작동한다.
하지만 makeClipRevealAnimation 함수는 무시된다.

해결방법
1. 최소 SDK 버전을 API 레벨 23 이상으로 변경한다.
(이 방법을 사용하면 안드로이드 5.0에서 사용하려고 했던 앱을 6.0 이상에서만 사용할 수 있게 된다.)
2. 안드로이드 버전을 검사하는 조건문 내부에 더 높은 버전의 API 실행 코드를 포함시킨다.
(이 방법을 사용하면 안드로이드 버전마다 다른 코드가 실행되게 해야 하므로 추가 코드를 작성해야 한다.)
(또한 장치에서 실행되는 안드로이드 버전에 따라 앱이 다르게 실행되므로 사용자 경험이 달라진다.)
=================================================================
@SuppressLint("RestrictedApi")
override fun onCreate(....){
//생략
if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){
//코드 실행
}else{
 startActivityForResult(intent, REQUEST_CODE_CHEAT)
}
}
=================================================================
코드 설명
- Build.VERSION_SDK_INT 상수는 현재 장치의 안드로이드 버전을 뜻한다.
- 위 상수 값을 API Level 23인 M(Marshmallow)와 비교한다.
- API 레벨 23 이상의 안드로이드 장치에서는 위 애니메이션 코드가 실행되고, 아닌 경우는 코드를 실행시키지 않고 앱만 실행시킨다.

* Jetpack 라이브러리
- Jetpack 라이브러리는 새로운 기능과 함께 이에 대한 하위 호환성도 제공한다.
- Jetpack 라이브러리를 사용하면 조건문을 사용한 API 레벨 확인 코드를 작성하지 않아도 된다.
- 서로 다른 API 버전을 확인하고 따로 처리하지 않아도 되어 앱 개발이 더 수월해진다.
- 자신들의 장치에서 실행되는 안드로이드 버전과 무관하게 같은 사용자 경험을 갖게 되어 사용자 입장에서도 좋다.
- 하지만 Jetpack 라이브러리에 추가되지 않은 API들은 안드로이드 버전 확인 코드를 따로 작성해야 한다.

* 안드로이드 개발자 문서 사용하기
- 개발자 페이지는 https://developer.android.com 이다.
- 코틀린 안드로이드 플랫폼 API 문서는 https://developer.android.com/reference/kotlin/packages 이다.
- 안드로이드 개발자 문서에서 특정 클래스나 함수가 어떤 API 레벨에 속하는지 알 수 있다.
- 정기적으로 새로운 안드로이드 버전이 나오면 그 버전에 업데이트 된 내용들과 어떻게 사용하는지 공부해야 한다.
- 개발자 페이지는 7개 부문으로 이루어져 있다.
1. 플랫폼 : 기본 플랫폼의 정보가 있으며, 지원되는 폼팩터 및 서로 다른 안드로이드 버전에 중점을 둔다.
2. 안드로이드 스튜디오 : 안드로이드 스튜디오의 내려받기 및 각종 도구와 기능을 소개한다.
3. 구글 플레이 : 구글 플레이의 소개와 구글 플레이 콘솔을 통한 앱의 배포 등을 알려준다.
4. Jetpack : Jetpack 라이브러리들에 관한 상세한 정보를 알려준다.
5. Kotlin : 코틀린 소개와 앱 개발에 필요한 각종 정보를 제공한다.
6. 문서 : 개발자 문서의 메인 페이지다. API문서, 샘플 코드, 디자인 가이드라인, 교육 과정 정보를 제공한다.
7. 뉴스 : 안드로이드 관련 최신 기사와 소식을 알려준다.

한줄평 : 개발자 문서를 습관적으로 보자!
 */