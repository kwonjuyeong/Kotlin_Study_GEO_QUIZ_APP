package com.example.kotlin_android_programming_study.Chaptermemo

/*
Chapter5
안드로이드 앱의 디버깅

안드로이드 스튜디오에서 앱의 결함을 찾기 위해 제공하는 방법에는
Logcat, Android Lint, Debugger 가 있다.

1. 예외와 스택 기록
- Logcat
* 장치가 멈추거나 작동이 되지 않을때 안드로이드 스튜디오 하단 테두리에 있는 Logcat 도구 버튼을 클릭해 Logcat 에러를 찾아 볼 수 있다.
* 아래 Logcat 화면을 키면 빨간색 에러 메시지가 안드로이드 런타임 예외 메시지를 뜻한다.
* 에러메시지는 검색할 수도 있고, 로그 레벨 드롭다운에서 로그 레벨을 선택할 수 있다.
* 로그로 결함을 찾는 것은 앱이 실행중지 상태로 앱이 종료되었을 때 유용하다.

하지만 예외를 발생하지 않고 오작동으로 인한 에러라면 중단점(break point)을 찾아야한다.
이럴 때 사용하는 것이 스택 기록의 인한 진단 로깅과 디버거를 사용한 중단점 설정이다.

- Logging
* 코드에서 Log 를 찍어 에러가 어디서 발생했는지 찾는 방식을 로깅 방식이라고 한다.
Log.d(String, String, Throwable)
Log.d(TAG, "Update",  Exception())
Log.d(this, "error")

- Debugger
* 맨 왼쪽 영역의 회색 바를 클릭하면 빨간색의 작은 원이 나타나게 되는데 이것을 중단점(break point)라고 한다.
* (kotlin line break point) Cnt + 8을 눌러도 중단점을 지정/해제할 수 있다.
* 디버거가 중단점을 처리하게 하려면 앱을 일반 실행모드가 아닌 디버깅 모드로 실행해야한다.
* Run -> Debug APP 을 눌러 실행한다.
* 디버깅 모드로 실행을 시켜보게 되면 중단점까지 코드를 실행시키고 확인하고 다음 중단점까지 실행시키면서 코드의 에러를 확인 할 수 있다.
==========================================================================================
// 로그 방식과 디버거 방식은 각각 장단점이 있다.
로그 방식은
여러 곳에서 발생한 스택 기록을 하나의 로그에서 볼 수 있다는 장점이 있지만,
로깅 코드를 추가하고, 앱을 다시 빌드, 배포, 조사해야하는 단점이 있다.

디버그는
앱을 디버거에 연결해 실행하면 앱이 실행되는 동안 중단점을 설정해 앱의 여러가지 문제에 관한 정보를 얻을 수 있다.
========================================================================================
2. 안드로이드 특유의 디버깅
- Lint
* 리소스와 같이 안드로이드 특유의 문제들을 접할 경우 Lint 를 쓰는 것이 유용하다.
* Lint 는 안드로이드 코드의 정적 분석기이다.
* 정적 분석기란 앱을 실행하지 않고 코드를 검사해 결함을 찾는 프로그램을 뜻한다.
* Lint 는 안드로이드 프레임워크에 관한 자신의 지식을 이용해 사전에 코드를 더 깊이 있게 살펴보고, 컴파일러가 알 수 없는 문제를 찾는다.
* Lint 는 XML 에 정의된 객체의 타입 검사도 할 수 있다.
안드로이드 스튜디오 메뉴바 Analyze -> Inspect Code -> Whole project 를 선택하고 Ok 버튼을 클릭하면 Lint 검사를 실행하게 된다.
========================================================================================
3. 프로젝트 빌드 문제 해결
- 리소스 파일들의 XML 코드가 제대로 작성되었는지 재확인한다.
- 프로젝트를 처음부터 다시 빌드한다(Clean Build -> Rebuild Project)
- Gradle 을 사용해 현재 설정에 맞게 프로젝트를 동기화한다.
- 안드로이드 Lint 를 실행한다.
=========================================================================================
총정리
앱의 결함을 찾는 방법에는 Log, Debug, Lint 가 있다.

- Logging 는 Log.d("msg", errorMsg.toString()) 과 같은 로깅 메시지를 보고 싶은 코드에 넣어 로그를 보는 방식을 말한다.
- Debug 는 중단점을 설정해 앱을 실행시키면서 어디에서 결함이 생겼는지 알 수 있는 방식이다.
- Lint 는 안드로이드의 정적 분석기로 앱을 실행시키지 않고 코드를 검사해 결함을 찾는 프로그램이다.
컴파일러가 알 수 없는 문제를 찾으며 대부분의 Lint 경고는 해결하지 않아도 앱이 잘 실행된다.
- Logcat 은 앱의 전체적인 로그를 볼 수 있으며 각 레벨에 따른 로그 메시지를 확인할 수 있다.
앱에 런타임 에러가 발생했을 경우에는 앱이 종료되며 빨간색으로 에러 메시지를 확인할 수 있다.
========================================================================================
한줄평 :
평소에 자주 사용하는 Logging 방식이나 Lint 에러에 대한 정의를 다시 한번 볼 수 있어서 좋았고
가끔 사용하는 Debugger 에 대해 다시 사용해보면서 익히는 시간을 가질 수 있어서 좋았다.
 */